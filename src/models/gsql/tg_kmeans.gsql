CREATE QUERY tg_kmeans(int k = 2, int max_k = 5, float max_change = 1.0, string v_type, string e_type, bool random = FALSE, BOOL print_results = TRUE, STRING file_path="") FOR GRAPH {} SYNTAX V1 {{

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Community

    Maturity:
        Production

    Description: 
        Runs k-means clustering algorithm for a range of K values

    Publications:
        NA

    TigerGraph Documentation:
        NA

    Parameters:
        k:
            starting value of K range
        max_k:
            ending value of K range
        max_change:
            maximum centroid vector change condition
        v_type:
            vertex type to start from
        e_type:
            edge type to traverse
        random:
            if True, start from random (if false, non-random) centroid positions
        print_results:
            If True, print JSON output
        file_path:
            file to write CSV output to
    */

  MapAccum<int, ListAccum<float>> @@k_map;
  file f (file_path);

# for each k cluster value, call subquery to run calculation for the k number of clusters
  FOREACH k_value IN RANGE [k,max_k] DO
      @@k_map += (k_value -> tg_kmeans_sub(k_value, max_change, v_type, e_type, random, print_results, file_path));
  END;

# print JSON
  IF print_results THEN
      PRINT @@k_map;
  END;

# print to file
  IF file_path != "" THEN
      f.println(@@k_map);
  END;
}}
